Pasos para Agregar MÃ¡s Handlers en Diferentes Archivos
Crear un Nuevo Paquete para el Handler:
Para cada nueva entidad (por ejemplo, equipo, partido), crea un nuevo paquete dentro del directorio handler. Por ejemplo:

Copy
handler/
â”œâ”€â”€ jugador/
â”‚   â””â”€â”€ jugador.go
â”œâ”€â”€ equipo/
â”‚   â””â”€â”€ equipo.go
â”œâ”€â”€ partido/
â”‚   â””â”€â”€ partido.go
Implementar el Handler:
Dentro de cada nuevo paquete, implementa el handler correspondiente. Por ejemplo, para el handler de equipo, crea un archivo equipo.go:

go
Copy
// handler/equipo/equipo.go
package equipo

import (
    "encoding/json"
    "net/http"

    "hexagonal/internal/domain"
    "hexagonal/internal/port"
)

type Handler struct {
    service port.EquipoService
}

func NewHandler(service port.EquipoService) *Handler {
    return &Handler{service: service}
}

func (h *Handler) CrearEquipo(w http.ResponseWriter, r *http.Request) {
    var e domain.Equipo
    if err := json.NewDecoder(r.Body).Decode(&e); err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }

    if err := h.service.CrearEquipo(&e); err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(http.StatusCreated)
    json.NewEncoder(w).Encode(e)
}

// Implementar demÃ¡s handlers (ObtenerEquipo, ActualizarEquipo, EliminarEquipo, ListarEquipos, etc.)
Definir la Interfaz del Servicio:
AsegÃºrate de que la interfaz del servicio (EquipoService) estÃ© definida en el paquete port. Por ejemplo:

go
Copy
// internal/port/equipo.go
package port

import (
    "hexagonal/internal/domain"
)

type EquipoService interface {
    CrearEquipo(equipo *domain.Equipo) error
    ObtenerEquipo(id string) (*domain.Equipo, error)
    ActualizarEquipo(equipo *domain.Equipo) error
    EliminarEquipo(id string) error
    ListarEquipos() ([]*domain.Equipo, error)
}
Implementar el Servicio:
Implementa el servicio correspondiente en el paquete servicios. Por ejemplo:

go
Copy
// internal/servicios/equipo/equipo.go
package servicios

import (
    "hexagonal/internal/domain"
    "hexagonal/internal/port"
)

type equipoService struct {
    repo port.EquipoRepository
}

func NewEquipoService(repo port.EquipoRepository) port.EquipoService {
    return &equipoService{repo: repo}
}

func (s *equipoService) CrearEquipo(e *domain.Equipo) error {
    return s.repo.Create(e)
}

func (s *equipoService) ObtenerEquipo(id string) (*domain.Equipo, error) {
    return s.repo.GetByID(id)
}

func (s *equipoService) ActualizarEquipo(e *domain.Equipo) error {
    return s.repo.Update(e)
}

func (s *equipoService) EliminarEquipo(id string) error {
    return s.repo.Delete(id)
}

func (s *equipoService) ListarEquipos() ([]*domain.Equipo, error) {
    return s.repo.GetAll()
}
Configurar las Rutas en main.go:
En main.go, importa los nuevos handlers y configura las rutas correspondientes. Por ejemplo:

go
Copy
package main

import (
    "database/sql"
    "log"
    "net/http"

    "hexagonal/handler/equipo" // Importa el nuevo handler
    "hexagonal/handler/jugador"
    "hexagonal/internal/port"
    "hexagonal/internal/repository"
    "hexagonal/internal/servicios"
    postgresRepo "hexagonal/internal/repository/postgresql"

    "github.com/gorilla/mux"
)

func main() {
    // Configurar router
    router := mux.NewRouter()

    // Configurar conexiÃ³n a DB
    db, err := repository.NewPostgresDB()
    if err != nil {
        log.Fatal("Error conectando a DB:", err)
    }
    defer db.Close()

    // Inicializar los repositorios
    jugadorRepo := postgresRepo.NewJugadorRepository(db)
    equipoRepo := postgresRepo.NewEquipoRepository(db) // Asume que tienes un repositorio para equipos

    // Inyectar dependencias
    jugadorService := servicios.NewJugadorService(jugadorRepo)
    equipoService := servicios.NewEquipoService(equipoRepo)

    // Crear handlers
    jugadorHandler := jugador.NewHandler(jugadorService)
    equipoHandler := equipo.NewHandler(equipoService)

    // Rutas para jugadores
    router.HandleFunc("/jugadores", jugadorHandler.CrearJugador).Methods("POST")
    router.HandleFunc("/jugadores/{id}", jugadorHandler.ObtenerJugador).Methods("GET")
    router.HandleFunc("/jugadores/{id}", jugadorHandler.ActualizarJugador).Methods("PUT")
    router.HandleFunc("/jugadores/{id}", jugadorHandler.EliminarJugador).Methods("DELETE")
    router.HandleFunc("/jugadores", jugadorHandler.ListarJugadores).Methods("GET")

    // Rutas para equipos
    router.HandleFunc("/equipos", equipoHandler.CrearEquipo).Methods("POST")
    router.HandleFunc("/equipos/{id}", equipoHandler.ObtenerEquipo).Methods("GET")
    router.HandleFunc("/equipos/{id}", equipoHandler.ActualizarEquipo).Methods("PUT")
    router.HandleFunc("/equipos/{id}", equipoHandler.EliminarEquipo).Methods("DELETE")
    router.HandleFunc("/equipos", equipoHandler.ListarEquipos).Methods("GET")

    // Iniciar servidor
    log.Println("Servidor iniciado en :8080")
    log.Fatal(http.ListenAndServe(":8080", router))
}
Estructura Final de Directorios
Copy
â”œâ”€â”€ handler
â”‚   â”œâ”€â”€ jugador
â”‚   â”‚   â””â”€â”€ jugador.go
â”‚   â”œâ”€â”€ equipo
â”‚   â”‚   â””â”€â”€ equipo.go
â”‚   â””â”€â”€ partido
â”‚       â””â”€â”€ partido.go
â”œâ”€â”€ http
â”‚   â””â”€â”€ main.go
â””â”€â”€ internal
    â”œâ”€â”€ domain
    â”‚   â”œâ”€â”€ jugador.go
    â”‚   â”œâ”€â”€ equipo.go
    â”‚   â””â”€â”€ partido.go
    â”œâ”€â”€ port
    â”‚   â”œâ”€â”€ jugador.go
    â”‚   â”œâ”€â”€ equipo.go
    â”‚   â””â”€â”€ partido.go
    â”œâ”€â”€ repository
    â”‚   â”œâ”€â”€ mysql
    â”‚   â”‚   â””â”€â”€ repository.go
    â”‚   â”œâ”€â”€ postgresql
    â”‚   â”‚   â””â”€â”€ repository.go
    â”‚   â””â”€â”€ conexion_cliente.go
    â””â”€â”€ servicios
        â”œâ”€â”€ jugador
        â”‚   â””â”€â”€ jugador.go
        â”œâ”€â”€ equipo
        â”‚   â””â”€â”€ equipo.go
        â””â”€â”€ partido
            â””â”€â”€ partido.go
ConclusiÃ³n
Siguiendo estos pasos, puedes agregar tantos handlers como necesites, cada uno en su propio archivo y paquete. Esto mantiene tu cÃ³digo organizado, modular y fÃ¡cil de mantener. Si necesitas mÃ¡s ayuda o tienes mÃ¡s preguntas, Â¡no dudes en preguntar! ðŸ˜Š